#!/usr/bin/env python3
'''script to test STL specifications'''
from solver import *
from stl_main import *
from action_classes import *
from error_handling import *
from seq_reach_avoid_stay import *

# stl2 = STL(1, SeqReachAvoidStay(16, 2, 0.5, 1))

# obj2 = AND(1, EVENTUALLY(1, 0, 1, REACH(stl2.main, 0, 1, 0, 1, 0, 1)), EVENTUALLY(1, 4, 5, REACH(stl2.main, 2, 3, 2, 3, 2, 3))).call()
# obj2 = AND(1, EVENTUALLY(1, 0, 1, REACH(stl2.main, 0, 1, 0, 1)).call(), EVENTUALLY(1, 4, 5, REACH(stl2.main, 2, 3, 2, 3)).call()).call()
# obj2 = AND(1, EVENTUALLY(1, 0, 1, REACH(stl2.main, 0, 1)).call(), EVENTUALLY(1, 4, 5, REACH(stl2.main, 2, 3)).call()).call()

#------------ DRONE CASE------------#
# obj2 = AND(1, EVENTUALLY(1, 0, 1, REACH(stl2.main, -1, 2, -1, 2, 1, 4)), 
#             EVENTUALLY(1, 14, 15, REACH(stl2.main, 12, 15, 12, 15, 12, 15)),
#             OR(1, EVENTUALLY(1, 7, 8, REACH(stl2.main, 9, 12, 6, 9, 6, 9)), 
#                     EVENTUALLY(1, 7, 8, REACH(stl2.main, 3, 6, 6, 9, 6, 9))
#                 ),
#             ALWAYS(1, 0, 15, AVOID(stl2.main, 6, 9, 6, 11, 0, 15)),
#         ).call()
#-----------------------------------#


#------ ALWAYS EVENTUALLY CASE -----#
# obj2 = AND(1, EVENTUALLY(1, 0, 1, REACH(stl2.main, 0, 1, 0, 1)), 
#                EVENTUALLY(1, 3, 4, REACH(stl2.main, 7, 8, 11, 12)),
#                EVENTUALLY(1, 6, 7, REACH(stl2.main, 10, 11, 7, 8)),
#                EVENTUALLY(1, 9, 10, REACH(stl2.main, 7, 8, 11, 12)),
#                EVENTUALLY(1, 12, 13, REACH(stl2.main, 11, 12, 7, 8)),
#                EVENTUALLY(1, 14, 15, REACH(stl2.main, 14, 15, 14, 15))
#             ).call()
#-----------------------------------#

# stl2.plotter()



                #####        #####       #####       #######
               ##   ##      ##   ##      ##  ##      ##  
              ##           ##     ##     ##   ##     #### 
              ##           ##     ##     ##   ##     ####
               ##   ##      ##   ##      ##  ##      ## 
                #####        #####       #####       #######

######      ##     ##     ###    ##     ###    ##     ##     ###    ##     #####
##   ##     ##     ##     ####   ##     ####   ##     ##     ####   ##    ##
##   ##     ##     ##     ## ##  ##     ## ##  ##     ##     ## ##  ##   ##
## ##       ##     ##     ##  ## ##     ##  ## ##     ##     ##  ## ##   ##   ### 
##  ##       ##   ##      ##   ####     ##   ####     ##     ##   ####    ##   ##
##   ##       #####       ##    ###     ##    ###     ##     ##    ###     #####



# -------------------------------------- ALWAYS-EVENTUALLY EXAMPLE -------------------------------------- #

# Reach Constraints:  [[0, 1, 0, 1, 0, 1], [4, 5, 10, 11, 3, 4], [10, 11, 4, 5, 6, 7], [4, 5, 10, 11, 9, 10], [10, 11, 4, 5, 12, 13], [14, 15, 14, 15, 14, 18]]
# C0 = 0.43004072063185816
# C1 = -10.20072082563844
# C2 = 29.22494159777211
# C3 = -18.64582996024464
# C4 = 0.0
# C5 = 5.317565819233522
# C6 = -3.0781587059473305
# C7 = 0.9582462787250223
# C8 = -0.19498486660737038
# C9 = 0.027683080746682395
# C10 = -0.002815903275225475
# C11 = 0.0002066633134179747
# C12 = -1.0856791129733707e-05
# C13 = 3.981782968289559e-07
# C14 = -9.68205707533169e-09
# C15 = 1.4025152394538742e-10
# C16 = -9.161112189092483e-13
# C17 = 0.03497963968407091
# C18 = 18.73116193866058
# C19 = -66.97044954830065
# C20 = 77.56038024016016
# C21 = -43.56572937919289
# C22 = 14.3685364046494
# C23 = -3.026252681375182
# C24 = 0.41532106320930706
# C25 = -0.035009388296682854
# C26 = 0.001221590903197315
# C27 = 9.288664649233638e-05
# C28 = -1.608857890821893e-05
# C29 = 1.1236760536401676e-06
# C30 = -4.663205485859816e-08
# C31 = 1.190085669698537e-09
# C32 = -1.7325341909771985e-11
# C33 = 1.1052720790909387e-13
# C34 = 0.9650203603159291
# C35 = -13.685797757913463
# C36 = 42.7875717408059
# C37 = -37.46959035139938
# C38 = 14.164609393799356
# C39 = -1.4429565690217043
# C40 = -0.8675438859217939
# C41 = 0.4416539503040718
# C42 = -0.10663853066771725
# C43 = 0.016491167008641373
# C44 = -0.0017621467691667973
# C45 = 0.00013329839675933563
# C46 = -7.136462960347804e-06
# C47 = 2.647825836704992e-07
# C48 = -6.480607724453341e-09
# C49 = 9.414969768816906e-11
# C50 = -6.151224244217257e-13
# C51 = 0.5699592793681418
# C52 = 18.089270764721277
# C53 = -63.93069257347069
# C54 = 72.14597594904129
# C55 = -38.65655002955938
# C56 = 11.76233843601898
# C57 = -2.1345590392662284
# C58 = 0.20608871938311776
# C59 = 0.0
# C60 = -0.003052401466439201
# C61 = 0.0004776411570769076
# C62 = -4.162065673913837e-05
# C63 = 2.3575310906119646e-06
# C64 = -8.886111688326097e-08
# C65 = 2.1599973962990686e-09
# C66 = -3.0733102412884625e-11
# C67 = 1.9483086057686067e-13

# gamma 0 = C 0 * t.^ 0 + C 1 * t.^ 1 + C 2 * t.^ 2 + C 3 * t.^ 3 + C 4 * t.^ 4 + C 5 * t.^ 5 + C 6 * t.^ 6 + C 7 * t.^ 7 + C 8 * t.^ 8 + C 9 * t.^ 9 + C 10 * t.^ 10 + C 11 * t.^ 11 + C 12 * t.^ 12 + C 13 * t.^ 13 + C 14 * t.^ 14 + C 15 * t.^ 15 + C 16 * t.^ 16; 

# gamma 1 = C 17 * t.^ 0 + C 18 * t.^ 1 + C 19 * t.^ 2 + C 20 * t.^ 3 + C 21 * t.^ 4 + C 22 * t.^ 5 + C 23 * t.^ 6 + C 24 * t.^ 7 + C 25 * t.^ 8 + C 26 * t.^ 9 + C 27 * t.^ 10 + C 28 * t.^ 11 + C 29 * t.^ 12 + C 30 * t.^ 13 + C 31 * t.^ 14 + C 32 * t.^ 15 + C 33 * t.^ 16;

# gamma 2 = C 34 * t.^ 0 + C 35 * t.^ 1 + C 36 * t.^ 2 + C 37 * t.^ 3 + C 38 * t.^ 4 + C 39 * t.^ 5 + C 40 * t.^ 6 + C 41 * t.^ 7 + C 42 * t.^ 8 + C 43 * t.^ 9 + C 44 * t.^ 10 + C 45 * t.^ 11 + C 46 * t.^ 12 + C 47 * t.^ 13 + C 48 * t.^ 14 + C 49 * t.^ 15 + C 50 * t.^ 16;

# gamma 3 = C 51 * t.^ 0 + C 52 * t.^ 1 + C 53 * t.^ 2 + C 54 * t.^ 3 + C 55 * t.^ 4 + C 56 * t.^ 5 + C 57 * t.^ 6 + C 58 * t.^ 7 + C 59 * t.^ 8 + C 60 * t.^ 9 + C 61 * t.^ 10 + C 62 * t.^ 11 + C 63 * t.^ 12 + C 64 * t.^ 13 + C 65 * t.^ 14 + C 66 * t.^ 15 + C 67 * t.^ 16;




# -------------------------------------- DRONE EXAMPLE -------------------------------------- #

#------------------ DRONE OR CASE FIRST BLOCK ------------------#
# Reach Constraints:  [[-1, 2, -1, 2, 1, 4, 0, 1], [12, 15, 12, 15, 12, 15, 14, 15], [9, 12, 6, 9, 6, 9, 7, 8]]
# Avoid Constraints:  [[6, 9, 6, 11, 0, 15, 0, 15]]
# C0 = -0.5092201124440394
# C1 = -1.665740011109661
# C2 = 1.542484516723121
# C3 = -0.3243109601139466
# C4 = 0.026244366716944464
# C5 = -0.0007154516946045534
# C6 = -0.5092201124440394
# C7 = -0.9354351139789893
# C8 = 0.8798053580061804
# C9 = -0.15421328533867962
# C10 = 0.011825144550615181
# C11 = -0.00032995786104859844
# C12 = 1.4907798875559606
# C13 = -0.14819509743468093
# C14 = 0.32437796115886813
# C15 = -0.058556349964849215
# C16 = 0.0052465859553120706
# C17 = -0.0001699023672777245
# C18 = 1.9953899437779803
# C19 = -1.6883828104673564
# C20 = 1.5955854133448955
# C21 = -0.34080413875938786
# C22 = 0.02799927661790214
# C23 = -0.0007749401658234577
# C24 = 1.9953899437779803
# C25 = -0.9354351139789893
# C26 = 0.8798053580061804
# C27 = -0.15421328533867962
# C28 = 0.011825144550615181
# C29 = -0.00032995786104859844
# C30 = 3.99538994377798
# C31 = -0.14819509743468093
# C32 = 0.32437796115886813
# C33 = -0.058556349964849215
# C34 = 0.0052465859553120706
# C35 = -0.0001699023672777245


#------------------ DRONE OR CASE SECOND BLOCK ------------------#
# Reach Constraints:  [[-1, 2, -1, 2, 1, 4, 0, 1], [12, 15, 12, 15, 12, 15, 14, 15], [9, 12, 6, 9, 6, 9, 7, 8]]
# Avoid Constraints:  [[6, 9, 6, 9, 0, 15, 0, 15]]
# C0 = -0.9947193621508238
# C1 = 0.4277863285546202
# C2 = 1.2140297298487956
# C3 = -0.27679682188266586
# C4 = 0.02200792560735738
# C5 = -0.0005888928692527835
# C6 = -0.5105612756983524
# C7 = -1.4667281217292212
# C8 = 1.0843122115171406
# C9 = -0.18152804910001696
# C10 = 0.013280466284529367
# C11 = -0.0003552471176615102
# C12 = 1.4894387243016476
# C13 = -1.27618875247245
# C14 = 0.655150320834794
# C15 = -0.08099965733727106
# C16 = 0.004422992408222249
# C17 = -8.864906559813607e-05
# C18 = 1.5105612756983524
# C19 = 0.4277863285546202
# C20 = 1.2140297298487956
# C21 = -0.27679682188266586
# C22 = 0.02200792560735738
# C23 = -0.0005888928692527835
# C24 = 1.994719362150824
# C25 = -1.4667281217292212
# C26 = 1.0843122115171406
# C27 = -0.18152804910001696
# C28 = 0.013280466284529367
# C29 = -0.0003552471176615102
# C30 = 3.994719362150824
# C31 = -1.27618875247245
# C32 = 0.655150320834794
# C33 = -0.08099965733727106
# C34 = 0.004422992408222249
# C35 = -8.864906559813607e-05